---
title: "PyTorch Tensors"
description: "This project serves as an introduction to PyTorch and tensors."
author: "Matthias Quinn"
date: "11/20/2022"
categories:
  - code
  - ML
image: "Tensors Visual Logo.jpeg"
image-alt: "Copyright Furkan Gulsen"
format: html
execute:
  cache: true
jupyter: python3

---

::: columns
::: {.column width="40%"}
## GOAL

Learn more about the Machine Learning framework known as PyTorch.
:::

::: {.column width="10%"}
<!-- empty column to create gap -->
:::

::: {.column width="40%"}
## RESULT

A better understanding of PyTorch and what tensors are.
:::
:::

This walkthrough is my interpretation of the official [PyTorch tutorial on tensors.](https://pytorch.org/tutorials/beginner/basics/tensor_tutorial.html)

## Tensors

Tensors are a data structure similar to arrays and matrices. PyTorch uses tensors to encode both the inputs and outputs of a model as well as model parameters.

Tensors are like [NumPy](https://numpy.org/) arrays, but tensors can be run on GPUs and are also optimized for automatic differentiation.

### Load in the libraries

```{python}
import numpy as np
import torch
```

### Initializing a Tensor
Tensors can be initialized in various ways, like so:

**Directly from data:**
```{python}
data = [[1, 2],[3, 4]]
x_data = torch.tensor(data)
```

**From a NumPy array:**
```{python}
np_array = np.array(data)
x_np = torch.from_numpy(np_array)
```

**From another tensor:**
```{python}
x_ones = torch.ones_like(x_data) # retains the properties of x_data
print(f"Ones Tensor: \n {x_ones} \n")

x_rand = torch.rand_like(x_data, dtype=torch.float) # overrides the datatype of x_data
print(f"Random Tensor: \n {x_rand} \n")
```






