{
  "hash": "26ad2795eeea33e91f470083d33c64d5",
  "result": {
    "markdown": "---\ntitle: \"Randomization Schemas\"\ndescription: \"This project is a full demonstration of designing an experiment, with an application in Shiny.\"\nauthor: \"Matthias Quinn\"\ndate: \"09/18/2020\"\ncategories:\n  - code\n  - statistics\n  - designs\n  - college\nimage: \"RShinyLogo.jpeg\"\nimage-alt: \"Made with Shiny\"\nformat: html\nserver: shiny\n---\n\n\n::: columns\n::: {.column width=\"40%\"}\n## GOAL\n\nProduce the same schema that you have, which represents the desired study design. The input to your programs should be the parameters of # of sites, # of subjects/site, a randomization ratio, and various stratification levels.\n:::\n\n::: {.column width=\"10%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"40%\"}\n## RESULT\n\nA reactive application that creates a design schema, given the researchers design parameters. \n\nThis project was finished in about 5 weeks.\n:::\n:::\n\nLet's say we're a researcher interested in deciding which treatment to give to our target audience. Since we want to make sure we follow proper guidelines, we decide to reach out to a friend of ours, a statistician, for advice.\n\nShe says that a good practice would be to create a credible, experimental design to find what we're looking for. This project is essentially a reproducible example of our goals with the following condition:\n\n1. Write a completely randomized design schema for $S$ subjects at $T$ sites in blocks of $B$ where randomization is $N:D$ in terms of treatment to control.\n\n### Running Example:\n$30$ subjects at site one in blocks of $6$ where the randomization of treatment to control is $1:1$\n\n### Solution:\nSetting a seed is necessary for reproducibility.\n\nAlso, having explainable code was a requirement for this project, as the client may have wanted to know how to make changes in the future.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'DT'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n```\n:::\n:::\n\n\n#### Creating the Design Schema:\n\n::: {.cell}\n\n:::\n\n\n#### Creating the User Interface:\n\n::: {.cell .panel-sidebar}\n\n:::\n\n\n#### Creating the Server Side:\n\n::: {.cell context='server'}\n\n:::\n\npreserve1ec0c631fa346a20\npreserve72516f6008d270f2\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"assertthat\",\"base\",\"bslib\",\"cachem\",\"cli\",\"compiler\",\"crosstalk\",\"datasets\",\"DBI\",\"digest\",\"dplyr\",\"DT\",\"ellipsis\",\"evaluate\",\"fansi\",\"fastmap\",\"fontawesome\",\"generics\",\"glue\",\"graphics\",\"grDevices\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"jquerylib\",\"jsonlite\",\"knitr\",\"later\",\"lifecycle\",\"magrittr\",\"memoise\",\"methods\",\"mime\",\"pillar\",\"pkgconfig\",\"promises\",\"R6\",\"randomizr\",\"Rcpp\",\"renv\",\"rlang\",\"rmarkdown\",\"rstudioapi\",\"sass\",\"shiny\",\"shinythemes\",\"shinyWidgets\",\"stats\",\"stringi\",\"stringr\",\"tibble\",\"tidyselect\",\"tools\",\"utf8\",\"utils\",\"vctrs\",\"xfun\",\"xtable\",\"yaml\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"0.2.1\",\"4.2.1\",\"0.4.1\",\"1.0.6\",\"3.4.1\",\"4.2.1\",\"1.2.0\",\"4.2.1\",\"1.1.3\",\"0.6.30\",\"1.0.10\",\"0.26\",\"0.3.2\",\"0.17\",\"1.0.3\",\"1.1.0\",\"0.4.0\",\"0.1.3\",\"1.6.2\",\"4.2.1\",\"4.2.1\",\"0.5.3\",\"1.5.4\",\"1.6.6\",\"0.1.4\",\"1.8.3\",\"1.40\",\"1.3.0\",\"1.0.3\",\"2.0.3\",\"2.0.1\",\"4.2.1\",\"0.12\",\"1.8.1\",\"2.0.3\",\"1.2.0.1\",\"2.5.1\",\"0.22.0\",\"1.0.9\",\"0.16.0\",\"1.0.6\",\"2.17\",\"0.14\",\"0.4.2\",\"1.7.3\",\"1.2.0\",\"0.7.4\",\"4.2.1\",\"1.7.8\",\"1.4.1\",\"3.1.8\",\"1.2.0\",\"4.2.1\",\"1.2.2\",\"4.2.1\",\"0.5.0\",\"0.34\",\"1.8-4\",\"2.3.6\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preserve1ec0c631fa346a20": "\n<script type=\"application/shiny-prerendered\" data-context=\"server\">\n# Define server logic to summarize and view selected data set ----\nserver <- function(input, output, session){\n\n    # Create caption ----\n    # The output$caption is computed based on a reactive expression\n    # that returns input$caption. When the user changes the\n    # \"caption\" field:\n    #\n    # 1. This function is automatically called to recompute the output\n    # 2. New caption is pushed back to the browser for re-display\n    #\n    # Note that because the data-oriented reactive expressions\n    # below don't depend on input$caption, those expressions are\n    # NOT called when input$caption changes\n    output$caption <- renderText({\n        input$caption\n    })\n\n    # Using the above inputs, put into a reactive environment the\n    # elements that you created above in the user interface\n    FINAL <- reactive({schema(\n        if (input$SiteType == \"numeric\"){\n          Sites = input$NumericSites}\n        else {\n          Sites = input$CharSites\n        },\n        NSubjects = input$NSubjects,\n        RRatio = input$RRatio,\n        BlockSize = input$BlockSize,\n        if (input$Copy == TRUE){\n          seed = input$SeedNum}\n        else {\n          seed = NULL})})\n\n    # Output the schema:\n    output$table <- DT::renderDataTable({\n        FINAL()}\n    )\n\n    # Instructions via HTML:\n    observeEvent(input$Instructions, {\n        show_alert(\n            title = \"Instructions\",\n            text =  p(\"1. Choose the sites you would like\",\n                      br(),\n                      \"2. Input the number of subjects per site\",\n                      br(),\n                      \"3. Input the randomization ratio in the form of a floating-point number\",\n                      br(),\n                      \"4. Input the number of subjects per block\",\n                      br(),\n                      \"5. You can reproduce your results if you use the handy switch\",\n                      br(),\n                      \"Note: The program will automatically update after each change you make\")\n        )\n    })\n\n}\n</script>\n",
      "preserve72516f6008d270f2": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n"
    },
    "postProcess": true
  }
}